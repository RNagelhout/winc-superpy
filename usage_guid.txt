
# Requirements:
    - python(v3.11.3)
    - datetime(v5.2)
    - rich(v13.5.2)
    - tabulate(v0.8.0)
    - numpy(v1.26.0)


# Change the date of today:
This function changes the date, that is perceived by the system as today.

Usage: python main.py date_today [Date]

Examples: 
    python main.py date_today 2023-10-20
    python main.py date_today 2021-09-11

Output: 
    Changed the date of today to 2023-10-20.
    Changed the date of today to 2021-09-11.


# Advance the date of today with days:
This function advance the date, that is perceived by the system as today with a given amount. 

Usage: python main.py advance_date [Days]

Examples with a current date is 2023-10-20:
    python main.py advance_date -20
    python main.py advance_date 10

Output: 
    Changed the date of today to 2023-09-30.
    Changed the date of today to 2023-10-30.


# Create and add new product to bought.csv
This function creates and add a new product to bought.csv.
Purchase date is optional, if this this date is not filled in, it wil take the date that is perceived by the system as today. 

Usage: python main.py add_product ["Product number", "Product name", Amount, Price, Experiation date, -p Purchase date]

Examples: 
    python main.py add_product "258660", "Pizza", 10, 15.04, 2023-05-15, -p 2023-01-17
    python main.py add_product "258656", "Sla", 25, 5.14, 2023-02-10

Output: 
    You've added 10 Pizza to bought.csv and in the bought.csv is added a new row for the product.
    You've added 25 Sla to bought.csv and in the bought.csv is added a new row for the product.


# Create and add new product to sold.csv and remove from bought.csv
This function creates and add a new product to the fie sold.csv and remove this specific product from the bought.csv file.
Selling date is optional, if this this date is not filled in, it wil take the date that is perceived by the system as today. 


Usage: python main.py sell_product ["Product number", Amount, Selling price, -s Selling date]

Examples: 
    python main.py sell_product "258657", 1, 20.50, 2023-02-25
    python main.py sell_product "258656", 2, 8.25

Output: 
    You've added 1 Aardappels to sold.csv and reduced 1 from bought.csv.
    You've added 2 Sla to sold.csv and reduced 2 from bought.csv.


# Remove product from file based on product_id
This function removes a product from a given file(sold or bought) based on a given product-id.

Usage: python main.py remove_product ["csv-file name", Product number]

Examples: 
    python main.py remove_product "bought" 258660
    python main.py remove_product "sold" 258656

Output: 
    Product deleted 258660 from bought.csv!
    Product deleted 258656 from sold.csv!


# Create report bought:
Based on a given the report-type bought, this function creates a overview of all the products in bought.csv. 

Usage: python main.py report [Report type]

Example: 
    python main.py report bought

Output: 
    Date of today: 2023-10-20
    Description: Overview of all the products we bought:
    ╒══════════════╤══════════════════╤════════════════╤══════════════════╤═════════════════╤══════════════════╤═══════════════════╕
    │   product_id │   product_number │ product_name   │   product_amount │ purchase_date   │   purchase_price │ expiration_date   │
    ╞══════════════╪══════════════════╪════════════════╪══════════════════╪═════════════════╪══════════════════╪═══════════════════╡
    │            1 │           258651 │ Peren          │               10 │ 2023-01-17      │             1.11 │ 2023-05-15        │
    ├──────────────┼──────────────────┼────────────────┼──────────────────┼─────────────────┼──────────────────┼───────────────────┤
    │            2 │           258652 │ Appels         │                3 │ 2023-01-17      │             2.1  │ 2023-05-15        │
    ├──────────────┼──────────────────┼────────────────┼──────────────────┼─────────────────┼──────────────────┼───────────────────┤
    │            3 │           258653 │ Watermeloen    │               25 │ 2023-01-17      │             9.12 │ 2023-08-15        │
    ├──────────────┼──────────────────┼────────────────┼──────────────────┼─────────────────┼──────────────────┼───────────────────┤
    │            4 │           258654 │ Boerenkool     │              220 │ 2023-01-17      │             8.24 │ 2023-10-15        │
    ├──────────────┼──────────────────┼────────────────┼──────────────────┼─────────────────┼──────────────────┼───────────────────┤
    │            5 │           258655 │ Spruiten       │              682 │ 2023-01-17      │             5.12 │ 2023-09-15        │
    ├──────────────┼──────────────────┼────────────────┼──────────────────┼─────────────────┼──────────────────┼───────────────────┤
    │            7 │           258656 │ Sla            │              190 │ 2023-01-17      │             5.14 │ 2023-05-15        │
    ├──────────────┼──────────────────┼────────────────┼──────────────────┼─────────────────┼──────────────────┼───────────────────┤
    │            8 │           258657 │ Aardappels     │               23 │ 2023-01-17      │             3.48 │ 2023-05-15        │
    ╘══════════════╧══════════════════╧════════════════╧══════════════════╧═════════════════╧══════════════════╧═══════════════════╛


# Create report sold:
Based on a given the report-type sold, this function creates a overview of all the products in sold.csv.
 
Usage: python main.py report [Report type]

Example: 
    python main.py report sold 

Output: 
    Date of today: 2023-10-20
    Description: Overview of all the products we sold:

    ╒══════════════╤══════════════════╤════════════════╤══════════════════╤══════════════════╤════════════════╤═════════════════╕
    │   product_id │   product_number │ product_name   │   product_amount │   purchase_price │ selling_date   │   selling_price │
    ╞══════════════╪══════════════════╪════════════════╪══════════════════╪══════════════════╪════════════════╪═════════════════╡
    │            1 │           258656 │ Sla            │              161 │             5.14 │ 2023-08-26     │            20.5 │
    ├──────────────┼──────────────────┼────────────────┼──────────────────┼──────────────────┼────────────────┼─────────────────┤
    │            2 │           258657 │ Aardappels     │                5 │             3.48 │ 2023-05-25     │             8.5 │
    ├──────────────┼──────────────────┼────────────────┼──────────────────┼──────────────────┼────────────────┼─────────────────┤
    │            4 │           258653 │ Watermeloen    │               25 │             9.12 │ 2023-08-25     │            20.5 │
    ╘══════════════╧══════════════════╧════════════════╧══════════════════╧══════════════════╧════════════════╧═════════════════╛


# Create report current_stock:
Based on a given the report-type current_stock, this function creates a overview of all the products in stock.

Usage: python main.py report [Report type]

Example:
    python main.py report current_stock

Output: 
    Date of today: 2023-08-01
    Description: Overview of all the products in our stock. Exclusive expired products:

    ╒══════════════╤══════════════════╤════════════════╤══════════════════╤═════════════════╤══════════════════╤═══════════════════╕
    │   product_id │   product_number │ product_name   │   product_amount │ purchase_date   │   purchase_price │ expiration_date   │
    ╞══════════════╪══════════════════╪════════════════╪══════════════════╪═════════════════╪══════════════════╪═══════════════════╡
    │            1 │           258651 │ Peren          │               10 │ 2023-01-17      │             1.11 │ 2023-05-15        │
    ├──────────────┼──────────────────┼────────────────┼──────────────────┼─────────────────┼──────────────────┼───────────────────┤
    │            2 │           258652 │ Appels         │                3 │ 2023-01-17      │             2.1  │ 2023-05-15        │
    ├──────────────┼──────────────────┼────────────────┼──────────────────┼─────────────────┼──────────────────┼───────────────────┤
    │            7 │           258656 │ Sla            │              190 │ 2023-01-17      │             5.14 │ 2023-05-15        │
    ├──────────────┼──────────────────┼────────────────┼──────────────────┼─────────────────┼──────────────────┼───────────────────┤
    │            8 │           258657 │ Aardappels     │               23 │ 2023-01-17      │             3.48 │ 2023-05-15        │
    ╘══════════════╧══════════════════╧════════════════╧══════════════════╧═════════════════╧══════════════════╧═══════════════════╛


# Create report expired:
Based on a given the report-type expired, this function creates a overview of all the products with an expired date.

Usage: python main.py report [Report type]

Example: 
    python main.py report expired 
Output: 
    Date of today: 2023-08-20
    Description: Overview of all the expired products:

    ╒══════════════╤══════════════════╤════════════════╤══════════════════╤═════════════════╤══════════════════╤═══════════════════╕
    │   product_id │   product_number │ product_name   │   product_amount │ purchase_date   │   purchase_price │ expiration_date   │
    ╞══════════════╪══════════════════╪════════════════╪══════════════════╪═════════════════╪══════════════════╪═══════════════════╡
    │            1 │           258651 │ Peren          │               10 │ 2023-01-17      │             1.11 │ 2023-05-15        │
    ├──────────────┼──────────────────┼────────────────┼──────────────────┼─────────────────┼──────────────────┼───────────────────┤
    │            2 │           258652 │ Appels         │                3 │ 2023-01-17      │             2.1  │ 2023-05-15        │
    ├──────────────┼──────────────────┼────────────────┼──────────────────┼─────────────────┼──────────────────┼───────────────────┤
    │            3 │           258653 │ Watermeloen    │               25 │ 2023-01-17      │             9.12 │ 2023-08-15        │
    ├──────────────┼──────────────────┼────────────────┼──────────────────┼─────────────────┼──────────────────┼───────────────────┤
    │            7 │           258656 │ Sla            │              190 │ 2023-01-17      │             5.14 │ 2023-05-15        │
    ├──────────────┼──────────────────┼────────────────┼──────────────────┼─────────────────┼──────────────────┼───────────────────┤
    │            8 │           258657 │ Aardappels     │               23 │ 2023-01-17      │             3.48 │ 2023-05-15        │
    ╘══════════════╧══════════════════╧════════════════╧══════════════════╧═════════════════╧══════════════════╧═══════════════════╛


# Create report revenue total:
Based on a given the report-type revenue and a given variation total, this function creates a overview of the revenue of all the products that where sold in total.

Usage: python main.py report [Report type, Variation]

Example: 
    python main.py report revenue --total 

Output: 
    Date of today: 2023-08-01
    Description: Overview of the total revenue:

    ╒══════════════╤══════════════════╤════════════════╤══════════════════╤══════════════════╤════════════════╤═════════════════╤═════════════════════════╕
    │   product_id │   product_number │ product_name   │   product_amount │   purchase_price │ selling_date   │   selling_price │   Total_product_revenue │
    ╞══════════════╪══════════════════╪════════════════╪══════════════════╪══════════════════╪════════════════╪═════════════════╪═════════════════════════╡
    │            2 │           258657 │ Aardappels     │                5 │             3.48 │ 2023-05-25     │             8.5 │                    25.1 │
    ├──────────────┼──────────────────┼────────────────┼──────────────────┼──────────────────┼────────────────┼─────────────────┼─────────────────────────┤
    │              │                  │                │                  │                  │                │                 │                    25.1 │
    ╘══════════════╧══════════════════╧════════════════╧══════════════════╧══════════════════╧════════════════╧═════════════════╧═════════════════════════╛


# Create report revenue of today:
Based on a given the report-type revenue and a given variation today, this function creates a overview of the revenue of all the products that where sold today.

Usage: python main.py report [Report type, Variation]

Example: 
    python main.py report revenue --today  

Output: 
    Date of today: 2023-08-26
    Description: Overview of the todays revenue:

    ╒══════════════╤══════════════════╤════════════════╤══════════════════╤══════════════════╤════════════════╤═════════════════╤═════════════════════════╕
    │   product_id │   product_number │ product_name   │   product_amount │   purchase_price │ selling_date   │   selling_price │   Total_product_revenue │
    ╞══════════════╪══════════════════╪════════════════╪══════════════════╪══════════════════╪════════════════╪═════════════════╪═════════════════════════╡
    │            1 │           258656 │ Sla            │              161 │             5.14 │ 2023-08-26     │            20.5 │                 2472.96 │
    ├──────────────┼──────────────────┼────────────────┼──────────────────┼──────────────────┼────────────────┼─────────────────┼─────────────────────────┤
    │            4 │           258653 │ Watermeloen    │               25 │             9.12 │ 2023-08-26     │            20.5 │                  284.5  │
    ├──────────────┼──────────────────┼────────────────┼──────────────────┼──────────────────┼────────────────┼─────────────────┼─────────────────────────┤
    │              │                  │                │                  │                  │                │                 │                 2757.46 │
    ╘══════════════╧══════════════════╧════════════════╧══════════════════╧══════════════════╧════════════════╧═════════════════╧═════════════════════════╛


# Create report revenue of yesterday:
Based on a given the report-type revenue and a given variation yesterday, this function creates a overview of the revenue of all the products that where sold yesterday.

Usage: python main.py report [Report type, Variation]

Example: 
    python main.py report revenue --yesterday    

Output: 
    Date of today: 2023-08-26
    Description: Overview of the revenue from yesterday 2023-08-25:

    ╒══════════════╤══════════════════╤════════════════╤══════════════════╤══════════════════╤════════════════╤═════════════════╤═════════════════════════╕
    │   product_id │   product_number │ product_name   │   product_amount │   purchase_price │ selling_date   │   selling_price │   Total_product_revenue │
    ╞══════════════╪══════════════════╪════════════════╪══════════════════╪══════════════════╪════════════════╪═════════════════╪═════════════════════════╡
    │            5 │           258651 │ Peren          │               10 │             1.11 │ 2023-08-25     │            3.25 │                   21.4  │
    ├──────────────┼──────────────────┼────────────────┼──────────────────┼──────────────────┼────────────────┼─────────────────┼─────────────────────────┤
    │            6 │           258652 │ Appels         │                3 │             2.1  │ 2023-08-25     │            4.75 │                    7.95 │
    ├──────────────┼──────────────────┼────────────────┼──────────────────┼──────────────────┼────────────────┼─────────────────┼─────────────────────────┤
    │              │                  │                │                  │                  │                │                 │                   29.35 │
    ╘══════════════╧══════════════════╧════════════════╧══════════════════╧══════════════════╧════════════════╧═════════════════╧═════════════════════════╛


# Create report revenue of a selected period:
Based on a given the report-type revenue and a given variation period, this function creates a overview of the revenue of all the products that where sold in 
between the given date.

Usage: python main.py report [Report type, Variation]

Example: 
    python main.py report revenue --period
    start date: 2023-08-01
    end date: 2023-08-30

Output: 
    Date of today: 2023-08-26
    Type here the start date of the period.(format : yyyy-mm-dd) : 2023-08-01
    Type here the end date of the period.(format : yyyy-mm-dd) : 2023-08-30
    Description: Overview of the revenue from 2023-08-01 till 2023-08-30 :

    ╒══════════════╤══════════════════╤════════════════╤══════════════════╤══════════════════╤════════════════╤═════════════════╤═════════════════════════╕
    │   product_id │   product_number │ product_name   │   product_amount │   purchase_price │ selling_date   │   selling_price │   Total_product_revenue │
    ╞══════════════╪══════════════════╪════════════════╪══════════════════╪══════════════════╪════════════════╪═════════════════╪═════════════════════════╡
    │            1 │           258656 │ Sla            │              161 │             5.14 │ 2023-08-26     │           20.5  │                 2472.96 │
    ├──────────────┼──────────────────┼────────────────┼──────────────────┼──────────────────┼────────────────┼─────────────────┼─────────────────────────┤
    │            4 │           258653 │ Watermeloen    │               25 │             9.12 │ 2023-08-26     │           20.5  │                  284.5  │
    ├──────────────┼──────────────────┼────────────────┼──────────────────┼──────────────────┼────────────────┼─────────────────┼─────────────────────────┤
    │            5 │           258651 │ Peren          │               10 │             1.11 │ 2023-08-25     │            3.25 │                   21.4  │
    ├──────────────┼──────────────────┼────────────────┼──────────────────┼──────────────────┼────────────────┼─────────────────┼─────────────────────────┤
    │            6 │           258652 │ Appels         │                3 │             2.1  │ 2023-08-25     │            4.75 │                    7.95 │
    ├──────────────┼──────────────────┼────────────────┼──────────────────┼──────────────────┼────────────────┼─────────────────┼─────────────────────────┤
    │              │                  │                │                  │                  │                │                 │                 2786.81 │
    ╘══════════════╧══════════════════╧════════════════╧══════════════════╧══════════════════╧════════════════╧═════════════════╧═════════════════════════╛